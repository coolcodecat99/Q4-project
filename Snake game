
import pygame
import time
import random
from pygame.locals import *



SIZE = 40


class Game:
    def __init__(self):
        pygame.init()
        pygame.display.set_caption("Codebasics Snake and Apple Game")
        
        pygame.mixer.init()
        self.play_background_music()

        self.surface = pygame.display.set_mode((800, 800))
        self.snake = Snake(self.surface)
        self.snake.draw()
        self.apple = Apple(self.surface)
        self.apple.draw()


    def is_collision(self, x1, y1, x2, y2):
        if x1 >= x2 and x1 < x2 + SIZE:
            if y1 >= y2 and y1 <= y2 + SIZE:
                return True
        return False

    def play_background_music(self):
        pygame.mixer.music.load("bg_music.mp3")
        pygame.mixer.music.play()


    def reset(self):
        self.snake = Snake(self.surface)
        self.apple = Apple(self.surface)


    def play(self):
        self.snake.walk()
        self.apple.draw()
        self.display_score()
        pygame.display.flip()


        # snake eats apple
        if self.is_collision(self.snake.x[0], self.snake.y[0], self.apple.x, self.apple.y):
            sound = pygame.mixer.Sound("ding.mp3")
            pygame.mixer.Sound.play(sound)
            self.snake.increase_length()
            self.apple.move()


        # snake colliding with itself
        for i in range(2, self.snake.length):
            if self.is_collision(self.snake.x[0], self.snake.y[0], self.snake.x[i], self.snake.y[i]):
                sound = pygame.mixer.Sound("game_over.mp3")
                pygame.mixer.Sound.play(sound)
                raise "Game over"
        
        # snake hits wall
        if not (0 <= self.snake.x[0] < 800 and 0 <= self.snake.y[0] < 800):
            self.play_sound('game_over.mp3')
            raise "Hit boundary"




    def display_score(self):
        font = pygame.font.SysFont('Comic Sans',20)
        score = font.render(f"Score: {self.snake.length}",True,(0,0,255))
        self.surface.blit(score,(700,10))


    def show_game_over(self):
        self.surface.fill((153,227,107))
        font = pygame.font.SysFont('Comic Sans', 20)
        line1 = font.render(f"Game over! Your score: {self.snake.length}", True, (0, 0, 255))
        self.surface.blit(line1, (100,300))
        line2 = font.render(f"To play again, press Enter. To exit, press Escape.", True, (0, 0, 255))
        self.surface.blit(line2, (100,350))
        pygame.mixer.music.pause()
        pygame.display.flip()


    def run(self):
        running = True
        pause = False

        while running:
            for event in pygame.event.get():
                if event.type == KEYDOWN:
                    if event.key == K_ESCAPE:
                        running = False
                    
                    if event.key == K_RETURN:
                        pygame.mixer.music.unpause()
                        pause = False

                    if not pause:
                        if event.key == K_UP:
                            self.snake.move_up()

                        if event.key == K_DOWN:
                            self.snake.move_down()
               
                        if event.key == K_LEFT:
                            self.snake.move_left()

                        if event.key == K_RIGHT:
                            self.snake.move_right()

                elif event.type == QUIT:
                    running = False


            try:

                if not pause:
                    self.play()
                
            except Exception as e:
                self.show_game_over()
                pause = True
                self.reset()


            time.sleep(0.2)




class Apple:
    def __init__(self, parent_screen):
        self.parent_screen = parent_screen
        self.image = pygame.image.load("rapple.jpg").convert()
        self.x = 120
        self.y = 120


    def draw(self):
        self.parent_screen.blit(self.image, (self.x, self.y))
        pygame.display.flip()


    def move(self):
        self.x = random.randint(0,15)*SIZE
        self.y = random.randint(0,15)*SIZE




class Snake:
    def __init__(self, parent_screen):
        self.parent_screen = parent_screen
        self.image = pygame.image.load("blue-square.jpg").convert()
        self.direction = "down"

        self.length = 1
        self.x = [40]
        self.y = [40]
    

    def increase_length(self):
        self.length+=1
        self.x.append(-1)
        self.y.append(-1)


    def draw(self):
        self.parent_screen.fill((155,217,100))
        
        for i in range(self.length):
            self.parent_screen.blit(self.image,(self.x[i],self.y[i]))
        pygame.display.flip()


    def move_up(self):
        self.direction = "up"
   
    def move_down(self):
        self.direction = "down"


    def move_left(self):
        self.direction = "left"


    def move_right(self):
        self.direction = "right"


    def walk(self):


        for i in range(self.length-1, 0,-1):
            self.x[i] = self.x[i-1]
            self.y[i] = self.y[i-1]


        if self.direction == "up":
            self.y[0] -= SIZE
        if self.direction == "down":
            self.y[0] += SIZE
        if self.direction == "left":
            self.x[0] -= SIZE
        if self.direction == "right":
            self.x[0] += SIZE


        self.draw()




if __name__ == "__main__":
    game = Game()
    game.run()
